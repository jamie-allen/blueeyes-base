/* Copyright 2009 Combined Conditional Access Development, LLC. */
package com.ccadllc.firebird.vms.dssrm.provisioning;

import java.util.Collections;
import java.util.Set;
import java.util.UUID;

import com.ccadllc.firebird.dss.common.datatypes.RouteDataType;
import com.ccadllc.firebird.dss.common.datatypes.TransportProtocolType;
import com.ccadllc.firebird.vms.dssrm.core.RouteDescription;

import net.jcip.annotations.Immutable;

import com.google.common.base.Preconditions;
import com.google.common.collect.HashMultimap;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Multimap;
import com.google.common.collect.Sets;

/**
 * Immutable snapshot of a route and its data.
 */
@Immutable
public final class RouteSnapshot
{
    private final UUID streamId;
    private final UUID id;
    private final int port;
    private final Multimap<Integer, Long> pidMappings;
    private final Set<Long> streamIds;
    private final TransportProtocolType transportProtocolType;
    private final RouteDataType routeDataType;
    private final ImmutableMap<String, String> properties;
    private final RouteDescription description;

    public RouteSnapshot(final RouteDescription description)
    {
        Preconditions.checkNotNull(description);
        streamId = description.getStreamId()
        id = description.getId()
        port = description.getPort()
        
        pidMappings = description.getPidMappings()
        if (description.getRouteDataType() == RouteDataType.MPEG_PACKETS && description.getPidMappings() != null)
        {
            this.pidMappings = pidMappings == null ? HashMultimap.<Integer, Long>create() : HashMultimap.<Integer, Long>create(pidMappings);
            streamIds = Collections.emptySet();
        }
        if (description.getRouteDataType() == RouteDataType.BLOCKS && description.getStreamIds() != null)
        {
        }
        transportProtocolType = description.getTransportProtocolType();
        routeDataType = description.getRouteDataType();
        properties = ImmutableMap.copyOf(description.getProperties());
    }

    public RouteDescription getDescription()
    {
        return description;
    }
}
