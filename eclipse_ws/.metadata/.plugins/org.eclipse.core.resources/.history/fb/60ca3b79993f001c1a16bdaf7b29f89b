package com.ccadllc.example.session;

import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

import com.ccadllc.commons.session.AbstractAsynchronousSession;
import com.ccadllc.commons.session.AbstractAsynchronousSessionTestSupport;
import com.ccadllc.commons.session.Session;
import com.ccadllc.commons.session.SessionCompletionListener;
import com.ccadllc.commons.util.concurrent.CallbackSupportingScheduledExecutorService;
import com.ccadllc.commons.util.concurrent.Callbacks;

import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

public class TestSessionTest<T extends AbstractAsynchronousSession>
{
    /**
     * Number of seconds to allow for a session to complete before the test is considered failed.
     */
    private static final int SESSION_COMPLETION_LIMIT_SECONDS = 5;

    /**
     * @see #getExecutor()
     */
    private static final CallbackSupportingScheduledExecutorService EXECUTOR =
        Callbacks.enableCallbackSupportForExecutor(Executors.newSingleThreadScheduledExecutor());

    /**
     * @see #getSession()
     */
    private T session;

    /**
     * Executor provided to sessions.
     *
     * @return EXECUTOR
     */
    protected CallbackSupportingScheduledExecutorService getExecutor()
    {
        return EXECUTOR;
    }

    /**
     * Gets the session under test.
     *
     * @return session
     */
    protected T getSession()
    {
        return session;
    }

    /**
     * Sets up the test.
     *
     * @throws Exception so subclasses can throw checked exceptions
     */
    @BeforeMethod
    public void setUp() throws Exception
    {
        session = createSession();
        session.setExecutor(EXECUTOR);
    }

    /**
     * Creates a session.
     *
     * <p>To be implemented by subclasses to create the session under test.</p>
     *
     * @return session to test
     */
    protected abstract T createSession();

    /**
     * Starts the session and waits up to 5 seconds for it to complete.
     *
     * @throws InterruptedException
     */
    protected void startSessionAndWaitForCompletion()
    {
        final Semaphore semaphore = new Semaphore(0);
        session.addListener(new SessionCompletionListener() {
            public void terminated(final Session session)
            {
                semaphore.release();
            }
        });
        session.start();
        try
        {
            Assert.assertTrue(semaphore.tryAcquire(SESSION_COMPLETION_LIMIT_SECONDS, TimeUnit.SECONDS));
        }
        catch (final InterruptedException ie)
        {
            throw new RuntimeException("Interrupted while waiting for session to finish.", ie);
        }
    }
    
    
    @Override
    protected TestSession createSession()
    {
        return new TestSession(20);
    }

    @Test
    public void testSession()
    {
        startSessionAndWaitForCompletion();

    }
}
