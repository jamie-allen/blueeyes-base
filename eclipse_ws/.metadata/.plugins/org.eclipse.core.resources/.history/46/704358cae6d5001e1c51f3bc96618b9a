/* Copyright 2009 Combined Conditional Access Development, LLC. */
package com.ccadllc.firebird.dss.server.realtime.external.route.manager.impl;

import static com.ccadllc.firebird.dss.server.common.RouteJmxUtility.MPEG2_JMX_DISPLAY_NAME;
import static com.ccadllc.firebird.dss.server.common.RouteJmxUtility.PID_MAPPING_STATISTICS_JMX_BEAN_TYPE;
import static com.ccadllc.firebird.dss.server.common.RouteJmxUtility.ROUTE_NOTIFICATIONS_MESSAGE_PREFIX;
import static com.ccadllc.firebird.dss.server.common.RouteJmxUtility.UDP_JMX_DISPLAY_NAME;

import java.io.IOException;

import com.ccadllc.firebird.dss.server.common.MBeanServerUtility;
import com.ccadllc.firebird.dss.server.common.RouteJmxUtility;
import com.ccadllc.firebird.dss.server.common.RouteSnapshot;
import com.ccadllc.firebird.dss.server.realtime.external.route.manager.impl.packetfilter.Mpeg2AdaptationFieldValidator;
import com.ccadllc.firebird.dss.server.realtime.external.route.manager.impl.packetfilter.Mpeg2PacketStatisticsCollector;
import com.ccadllc.firebird.dss.server.realtime.external.route.manager.impl.packetfilter.PidToStreamMapper;
import com.ccadllc.firebird.dss.server.realtime.external.route.manager.impl.packetfilter.UdpDatagramToMpeg2Transformer;
import com.ccadllc.firebird.dss.server.realtime.external.route.manager.management.JmxRouteNotificationManager;
import com.ccadllc.firebird.dss.server.realtime.external.route.manager.management.UdpMpeg2RouteInstrumentation;
import com.ccadllc.firebird.dss.server.realtime.stream.manager.StreamManager;
import com.ccadllc.firebird.vms.common.packetfiltering.CompositePacketFilter;
import com.ccadllc.firebird.vms.common.packetfiltering.PacketFilter;

import net.jcip.annotations.ThreadSafe;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableList;

/**
 * {@code RouteController} for UDP routes handling MPEG packet data.
 */
@ThreadSafe
public class UdpMpeg2RouteController extends AbstractUdpRouteController
{
    private final Logger logger = LoggerFactory.getLogger(UdpMpeg2RouteController.class);
    private final PidToStreamMapper mapper;
    private final String notificationsPrefixString;
    private final StreamManager streamManager;
    private final JmxRouteNotificationManager jmxRouteNotificationManager;

    public UdpMpeg2RouteController(
            final RouteSnapshot route,
            final StreamManager streamManager,
            final JmxRouteNotificationManager jmxRouteNotificationManager) throws IOException
    {
        super(route, streamManager, jmxRouteNotificationManager);

        logger.debug("Creating UdpRouteController for MPEG 2 Packet Data.");
        notificationsPrefixString = String.format(ROUTE_NOTIFICATIONS_MESSAGE_PREFIX,
            route.getId(), UDP_JMX_DISPLAY_NAME, MPEG2_JMX_DISPLAY_NAME);
        mapper = new PidToStreamMapper(route, streamManager, jmxRouteNotificationManager, notificationsPrefixString);
        final PacketFilter pidMappingStatistics = new Mpeg2PacketStatisticsCollector(mapper, route, PID_MAPPING_STATISTICS_JMX_BEAN_TYPE);
        final PacketFilter adaptationFieldValidator = new Mpeg2AdaptationFieldValidator(pidMappingStatistics, jmxRouteNotificationManager, notificationsPrefixString);
        final PacketFilter datagramToMpeg2Transformer = new UdpDatagramToMpeg2Transformer(adaptationFieldValidator, jmxRouteNotificationManager,
            notificationsPrefixString);
        setChain(new CompositePacketFilter(ImmutableList.of(datagramToMpeg2Transformer, adaptationFieldValidator, pidMappingStatistics, mapper)));
        this.streamManager = streamManager;
        this.jmxRouteNotificationManager = jmxRouteNotificationManager;

        logger.debug("Open UDP Port for MPEG 2 Packet data.");
        openUdpPort(route.getPort(), new UdpMpeg2RouteControllerHandler(getChain()));
    }

    @Override
    void updateValidations(final RouteSnapshot route)
    {
        Preconditions.checkNotNull(streamManager);
        Preconditions.checkNotNull(route);
        Preconditions.checkNotNull(route.getPidMappings());

    }

    @Override
    void updateInternal(final RouteSnapshot route)
    {
        mapper.update(route, streamManager, jmxRouteNotificationManager, notificationsPrefixString);
        MBeanServerUtility.register(new UdpMpeg2RouteInstrumentation(route),
            RouteJmxUtility.createRouteMxBeanName(route, RouteJmxUtility.ROUTE_INFORMATION_JMX_BEAN_TYPE));
    }
}
