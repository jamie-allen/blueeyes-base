/* Copyright 2009 Combined Conditional Access Development, LLC. */
package com.ccadllc.firebird.vms.dssrm.provisioning;

import java.io.IOException;
import java.io.InputStream;
import java.sql.Blob;
import java.sql.SQLException;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.Lob;
import javax.persistence.PostPersist;
import javax.persistence.PostRemove;
import javax.persistence.Table;

import com.ccadllc.firebird.core.base.common.util.osgi.TransactionalEventDispatcher;
import com.ccadllc.firebird.vms.dssrm.core.BlockSetDescription;

import org.hibernate.Hibernate;
import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.CollectionOfElements;
import org.hibernate.annotations.MapKey;
import org.hibernate.annotations.Type;
import org.osgi.service.event.Event;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.beans.factory.annotation.Required;
import org.springframework.util.CollectionUtils;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

@Entity(name = "DssrmBlockSet")
@Table(name = "dssrm_blockset")
@Configurable
public class BlockSetEntity
{

    /** Represents a blockset persisted event. */
    public static final transient String BLOCKSET_PERSISTED_EVENT = "com/ccadllc/firebird/vms/dssrm/provisioning/BlockSetPersistedEvent";

    /** Represents a blockset removed event. */
    public static final transient String BLOCKSET_REMOVED_EVENT = "com/ccadllc/firebird/vms/dssrm/provisioning/BlockSetRemovedEvent";

    /** Key for storing the blockset snapshot when sending an event to the event admin service. */
    public static final transient String BLOCKSET_SNAPSHOT_KEY = "blockSetSnapshot";

    /** Maximum column length for the blobData field. */
//    private static final transient int DESCRIPTOR_LENGTH = 10000;

    private transient TransactionalEventDispatcher eventDispatcher;

    @Id
    @Type(type = "com.ccadllc.firebird.core.database.persistence.UUIDUserType")
    private final UUID id;

    @Column(name = "blob_data")
    @Lob @Basic(fetch=FetchType.LAZY)
    private final Blob blobData;

    @CollectionOfElements(fetch = FetchType.EAGER)
    @JoinTable(name = "dssrm_blockset_property", joinColumns = { @JoinColumn(name = "blockset_id") })
    @MapKey(columns = { @Column(name = "key") })
    @Column(name = "value")
    private final Map<String, String> properties = Maps.newHashMap();

    @CollectionOfElements(fetch = FetchType.EAGER)
    @Cascade({org.hibernate.annotations.CascadeType.ALL })
    @JoinTable(name = "dssrm_blockset_descriptor", joinColumns = {@JoinColumn(name = "blockset_id") })
    private final List<BlockDescriptor> blockDescriptors = Lists.newArrayList();

//    @SuppressWarnings("unused")
    protected BlockSetEntity()
    {
        id = null;
        blobData = null;
    }

    public BlockSetEntity(final BlockSetDescription description, final InputStream blobData) throws IOException
    {
        Preconditions.checkNotNull(description);
        Preconditions.checkNotNull(blobData);
        Preconditions.checkNotNull(description.getBlockDescriptors());

        id = description.getId();

        if (!CollectionUtils.isEmpty(description.getProperties()))
        {
            properties.putAll(description.getProperties());
        }

        blockDescriptors.addAll(BlockDescriptorTransformer(description.getBlockDescriptors()));

        this.blobData = Hibernate.createBlob(blobData);
    }

    @Required
    public void setEventDispatcher(final TransactionalEventDispatcher eventDispatcher)
    {
        this.eventDispatcher = eventDispatcher;
    }

    public UUID getId() {
        return id;
    }

    public Blob getBlobData() {
        return blobData;
    }

    public InputStream getBlobDataAsStream() throws SQLException
    {
        return getBlobData() == null ? null : getBlobData().getBinaryStream();
    }

    public List<BlockDescriptor> getBlockDescriptors()
    {
        return blockDescriptors;
    }

    public Map<String, String> getProperties()
    {
        return properties;
    }

    @PostPersist
    public void persisted()
    {
        eventDispatcher.postEvent(new Event(BLOCKSET_PERSISTED_EVENT, ImmutableMap.of(BLOCKSET_SNAPSHOT_KEY, snapshot())));
    }

    @PostRemove
    public void removed()
    {
        eventDispatcher.postEvent(new Event(BLOCKSET_REMOVED_EVENT, ImmutableMap.of(BLOCKSET_SNAPSHOT_KEY, snapshot())));
    }

    public BlockSetSnapshot snapshot()
    {
        return new BlockSetSnapshot(id);
    }

    private List<BlockDescriptor> BlockDescriptorTransformer(final List<com.ccadllc.firebird.vms.dssrm.core.BlockDescriptor> coreBlockDescriptors)
    {
        final List<BlockDescriptor> blockDescriptors = Lists.newArrayList();
        for (final com.ccadllc.firebird.vms.dssrm.core.BlockDescriptor coreBlockDesc : coreBlockDescriptors)
        {
            blockDescriptors.add(new BlockDescriptor(coreBlockDesc.getNumberOfBlocks(), coreBlockDesc.getBlockByteSize()));
        }
        return blockDescriptors;
    }
}
