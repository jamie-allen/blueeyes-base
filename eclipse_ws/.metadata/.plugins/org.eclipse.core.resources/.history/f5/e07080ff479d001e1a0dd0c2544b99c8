/* Copyright 2009 Combined Conditional Access Development, LLC. */
package com.ccadllc.firebird.vms.dssrm.core;

import static org.hamcrest.Matchers.hasEntry;
import static org.hamcrest.Matchers.hasKey;
import static org.hamcrest.Matchers.hasProperty;

import java.util.UUID;

import org.hamcrest.Description;
import org.hamcrest.Matcher;
import org.hamcrest.TypeSafeMatcher;

import com.google.common.base.Preconditions;

/**
 * Utility class that provides matchers for {@link PeriodicDescription}s.
 *
 * @see DataStreamServerResourceManager#queryForPeriodic(Matcher)
 * @see DataStreamServerResourceManager#queryForPeriodics(Matcher)
 */
public final class PeriodicMatchers
{
    /** Prevents instantiation. */
    private PeriodicMatchers()
    {
    }

    public static Matcher<PeriodicDescription> hasId(final UUID id)
    {
        Preconditions.checkNotNull(id, "id");

        return new TypeSafeMatcher<PeriodicDescription>() {

            @Override
            public boolean matchesSafely(final PeriodicDescription toMatch)
            {
                return id.equals(toMatch.getId());
            }

            @Override
            public void describeTo(final Description desc)
            {
                desc.appendText("id is ").appendValue(id);
            }
        };
    }

    public static Matcher<PeriodicDescription> hasStreamId(final UUID streamId)
    {
        Preconditions.checkNotNull(streamId, "streamId");

        return new TypeSafeMatcher<PeriodicDescription>() {

            @Override
            public boolean matchesSafely(final PeriodicDescription toMatch)
            {
                return streamId.equals(toMatch.getStreamId());
            }

            @Override
            public void describeTo(final Description desc)
            {
                desc.appendText("streamId is ").appendValue(streamId);
            }
        };
    }

    public static <T> Matcher<T> hasPropertyKey(final String key)
    {
        return hasProperty("properties", hasKey(key));
    }

    public static <T> Matcher<T> hasPropertyValue(final String key, final String value)
    {
        return hasProperty("properties", hasEntry(key, value));
    }
}
