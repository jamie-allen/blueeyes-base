/*
 * Copyright 2009 Combined Conditional Access Development, LLC.
 */
package com.ccadllc.firebird.dss.server.configuration.stream.domain.management;

import static com.ccadllc.firebird.dss.server.configuration.stream.domain.management.TransportStreamLookupMXBean.TRANSPORT_STREAM_LOOKUP_MXBEAN_OBJECT_NAME;

import java.net.InetSocketAddress;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.ccadllc.commons.util.MapUtility;
import com.ccadllc.firebird.dss.common.datatypes.TransmissionType;
import com.ccadllc.firebird.dss.server.configuration.stream.domain.DefaultTransportStream;
import com.ccadllc.firebird.dss.server.configuration.stream.domain.IntegerRange;
import com.ccadllc.firebird.dss.server.configuration.stream.domain.Program;
import com.ccadllc.firebird.dss.server.configuration.stream.domain.TransportStream;

import net.jcip.annotations.Immutable;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jmx.export.annotation.ManagedOperation;
import org.springframework.jmx.export.annotation.ManagedResource;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

/**
 * MXBean implementation to support the lookup of component stream information.
 */
@ManagedResource(objectName = TRANSPORT_STREAM_LOOKUP_MXBEAN_OBJECT_NAME)
@Immutable
public final class TransportStreamLookup implements TransportStreamLookupMXBean
{
    private final Logger logger = LoggerFactory.getLogger(TransportStreamLookup.class);

    public TransportStreamLookup()
    {
    }

    @ManagedOperation
    public Long[] getTransportStreamIdsForTransportStreamId(final long transportStreamId)
    {
        return new Long[] {1L, 2L, 3L };
    }

    @ManagedOperation
    public Long[] getStreamIdsForDestination(final String ipAddress, final Integer port)
    {
        return new Long[] {100L, 200L, 300L };
    }

    @ManagedOperation
    public List<TransportStreamData> retrieveAllTransportStreams()
    {
        final List<TransportStreamData> transportStreams = createStubbedTestData();
        return transportStreams;
    }

    private List<TransportStreamData> createStubbedTestData()
    {
        final List<TransportStreamData> transportStreams = Lists.<TransportStreamData>newArrayList();

        TransportStream transportStreamOne;
        TransportStream transportStreamTwo;
        try
        {
            transportStreamOne = new DefaultTransportStream(
                Sets.newHashSet(new InetSocketAddress("127.0.0.1", 5155), new InetSocketAddress("10.52.212.165", 5165)),
                TransmissionType.IP_DIRECT,
                5005,
                501,
                Sets.newHashSet(new IntegerRange(1,2), new IntegerRange(3,4)),
                Sets.newHashSet(new IntegerRange(103,104), new IntegerRange(105,106)),
                MapUtility.<String, String>toMap("key1", "value 1", "key2", "value 2"));
            transportStreamOne.addProgram(100, MapUtility.<String, String>toMap("key1", "value 1", "key2", "value 2"));
            transportStreamOne.addProgram(101, MapUtility.<String, String>toMap("key3", "value 3"));
            transportStreamOne.addProgram(102, MapUtility.<String, String>toMap("key4", "value 4", "key5", "value 5"));

            transportStreamTwo = new DefaultTransportStream(
                Sets.newHashSet(new InetSocketAddress("127.0.0.1", 5155), new InetSocketAddress("10.52.212.165", 5165)),
                TransmissionType.MPEG2,
                5005,
                501,
                Sets.newHashSet(new IntegerRange(1,2), new IntegerRange(3,4)),
                Sets.newHashSet(new IntegerRange(103,104), new IntegerRange(105,106)),
                MapUtility.<String, String>toMap("key1", "value 1", "key2", "value 1"));
            transportStreamTwo.addProgram(107, MapUtility.<String, String>toMap("key6", "value 6", "key7", "value 7"));

            transportStreams.add(getTransportStreamData(transportStreamOne));
            transportStreams.add(getTransportStreamData(transportStreamTwo));
        }
        catch(final Exception e)
        {
            logger.error("Boooom", e);
        }
        return transportStreams;
    }

    private TransportStreamData getTransportStreamData(final TransportStream transportStream)
    {
        System.out.println("");
        return new TransportStreamData(
            )
            {

                @Override
                public Set<ProgramData> getPrograms()
                {
                    final Set<ProgramData> programs = Sets.<ProgramData>newHashSet();
                    for (final Program program : transportStream.getPrograms())
                    {
                        return new ProgramData(
                            )
                        {
                            public Integer getProgramNumber()
                            {
                                return program.getProgramNumber();
                            }

                            public long getPMTStreamId()
                            {
                                // TODO: Fix this.
                                return 100;
                            }

                            public Map<String, String> getProperties()
                            {
                                return program.getProperties();
//                                return properties != null ? Collections.unmodifiableMap(properties) : null;
                            }
                        }
                        programs.add(new ProgramData(program.getProgramNumber(), 100, program.getProperties()));
                    }
                    return programs;
                }

                @Override
                public String getName()
                {
                    return TransportStream.class.getSimpleName();
                }

                @Override
                public long getPatStreamId()
                {
                    try
                    {
                        return transportStream.getPatStream() != null
                            && transportStream.getPatStream().getId() != null ? transportStream.getPatStream().getId() : -1;
                    }
                    catch (final RuntimeException e)
                    {
                        e.printStackTrace();
                    }

                    return 1;
                }

                @Override
                public long getTransportStreamId()
                {
                    return transportStream.getId();
                    //TODO put statement above back in when actually retrieving from repository.
                    //return 500;
                }

                @Override
                public int getNetworkPid()
                {
                    return 101;
                    //TODO getNetworkpid not in transport stream yet.
                    //return transportStream.getNetworkPid();
                }

                @Override
                public TransmissionType getTransmissionType()
                {
                    return transportStream.getType();
                }

                @Override
                public Set<IntegerRange> getReservedPidRanges()
                {
                    return transportStream.getReservedPidRanges();
                }

                @Override
                public Set<IntegerRange> getReservedProgramNumberRanges()
                {
                    return transportStream.getReservedProgramNumberRanges();
                }

                @Override
                public Map<String, String> getProperties()
                {
                    return transportStream.getProperties() != null
                        ? Collections.unmodifiableMap(transportStream.getProperties()) : null;
                }

                @Override
                public Set<String> getDestinations()
                {
                    final Set<String> destinations = Sets.<String>newHashSet();
                    for (final InetSocketAddress address : transportStream.getDestinations())
                    {
                        destinations.add(address.toString());
                    }

                    return destinations;
                }
            };
    }
}
