package com.blah.test;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Reader;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.apache.commons.io.IOUtils;
import org.dom4j.dom.DOMNodeHelper.EmptyNodeList;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.EncodedResource;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

public class XmlTester
{
    private static final String LOCATION = "/Users/jallen/ccad/development/tracks/firebird/vms/test-plugin-1.0/tools/web/src/main/resources/META-INF/firebird/navigation-config.xml";

    public XmlTester()
    {

    }

    public void execute()
    {
        System.out.println("Looking for file: " + LOCATION);
        final Resource resource = new FileSystemResource(LOCATION);
        if (resource.exists())
        {
            System.out.println("File found!");
            final EncodedResource encodedResource = new EncodedResource(resource, "UTF-8");
            final XmlNavigationConfigurationParser parser = new XmlNavigationConfigurationParser();
            try
            {
                parser.parse(encodedResource.getResource());
            }
            catch (final IOException e)
            {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
//            final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
//            final DocumentBuilder builder = factory.newDocumentBuilder();
////          final Document document = builder.parse(inputStream);
////          final InputSource inputSource = new InputSource(inputStream);
////          inputSource.setEncoding("UTF-8");
//            final Reader reader = new BufferedReader(new InputStreamReader(encodedResource.getResource().getInputStream(), "UTF-8"));
//            final InputSource inputSource = new InputSource(reader);
//            final Document document = builder.parse(inputSource);
//            document.
//            final List<String> items = parseNavigationItems(document.getFirstChild());
        }
        else
        {
            System.out.println("DID NOT FIND THE FILE!");
        }
    }

    public static void main(final String[] args)
    {
        final XmlTester tester = new XmlTester();
        tester.execute();
    }

    private final class XmlNavigationConfigurationParser
    {
        private final Logger logger = LoggerFactory.getLogger(XmlNavigationConfigurationParser.class);

        public XmlNavigationConfigurationParser()
        {
        }

        /**
         * Parses the XML file referenced by the specified resource.
         *
         * @param location resource referencing the XML file to parse
         * @return parsed items
         * @throws IOException if an error is encountered opening the resource
         * @throws NavigationConfigurationException if an error is encountered while parsing
         */
        public void parse(final Resource location) throws IOException
        {
            final InputStream istream = location.getInputStream();
            try
            {
                parse(istream);
            }
            finally
            {
                IOUtils.closeQuietly(istream);
            }
        }

        /**
         * Parses the XML navigation configuration.
         *
         * @param inputStream input to the XML navigation configuration file
         * @return parsed navigation configuration
         * @throws NavigationConfigurationException if error is encountered while parsing the navigation configuration
         */
        private void parse(final InputStream inputStream)
        {
            final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

            try
            {
                final DocumentBuilder builder = factory.newDocumentBuilder();
//                final Document document = builder.parse(inputStream);
//                final InputSource inputSource = new InputSource(inputStream);
//                inputSource.setEncoding("UTF-8");
                final Reader reader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));
                final InputSource inputSource = new InputSource(reader);
                final Document document = builder.parse(inputSource);
                parseNavigationItems(document.getFirstChild());
            }
            catch (final ParserConfigurationException e)
            {
                System.out.println("Encountered unexpected parser configuration exception");
            }
            catch (final SAXException e)
            {
                System.out.println("Unable to parse XML document.");
            }
            catch (final IOException e)
            {
                System.out.println("Encountered IO error while parsing XML document.");
            }
        }

        private void parseNavigationItems(final Node node)
        {
            final XPath xpath = XPathFactory.newInstance().newXPath();
            NodeList subnodes = new EmptyNodeList();
            try
            {
                subnodes = (NodeList)xpath.evaluate("item", node, XPathConstants.NODESET);
            }
            catch (final XPathExpressionException e)
            {
                System.out.println("Unexpected XPath exception encountered.");
            }

            for (int i = 0; i < subnodes.getLength(); ++i)
            {
                final Node subnode = subnodes.item(i);
                parseNavigationItem(subnode);
            }
        }

        private void parseNavigationItem(final Node node)
        {
            System.out.println("FOUND ID! " + parseNavigationItemId(node));
        }

        private String parseNavigationItemId(final Node node)
        {
            final Node idNode = node.getAttributes().getNamedItem("id");
            final String id = idNode == null ? null : idNode.getNodeValue();
            logger.debug("########## Nav Config Item ID: {}", idNode.getNodeValue());
            if (id == null || id.length() == 0)
            {
                System.out.println("Missing required attribute \"id\" on item element.");
            }
            return id;
        }
    }
}
