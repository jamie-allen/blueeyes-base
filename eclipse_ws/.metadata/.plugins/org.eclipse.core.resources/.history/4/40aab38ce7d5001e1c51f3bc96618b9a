/*
 * Copyright 2008 Combined Conditional Access Development, LLC.
 */
package com.ccadllc.firebird.dss.server.realtime.timer.manager;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.UnknownHostException;
import java.util.Date;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.Semaphore;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;

import com.ccadllc.commons.util.MapUtility;
import com.ccadllc.commons.util.concurrent.BaseNameWithCountThreadNamingStrategy;
import com.ccadllc.commons.util.concurrent.CallbackSupportingScheduledExecutorService;
import com.ccadllc.commons.util.concurrent.LoggingScheduledThreadPoolExecutor;
import com.ccadllc.commons.util.concurrent.SimpleThreadFactory;
import com.ccadllc.commons.util.concurrent.ThreadNamingStrategy;
import com.ccadllc.commons.util.concurrent.support.DelegatingCallbackSupportingScheduledExecutorService;
import com.ccadllc.firebird.dss.common.datatypes.MeteringType;
import com.ccadllc.firebird.dss.common.datatypes.StreamType;
import com.ccadllc.firebird.dss.common.datatypes.TransmissionType;
import com.ccadllc.firebird.dss.server.common.DataBlockPeriodicData;
import com.ccadllc.firebird.dss.server.common.DataBlockStringsPeriodicData;
import com.ccadllc.firebird.dss.server.common.FunctionPeriodicData;
import com.ccadllc.firebird.dss.server.common.PeriodicDataType;
import com.ccadllc.firebird.dss.server.common.PeriodicSnapshot;
import com.ccadllc.firebird.dss.server.common.SnapshotUtility;
import com.ccadllc.firebird.dss.server.common.StreamSnapshot;
import com.ccadllc.firebird.dss.server.common.StreamedPeriodicData;
import com.ccadllc.firebird.dss.server.common.blocks.JRubyBlockGenerator;
import com.ccadllc.firebird.dss.server.configuration.blockset.domain.BlockSet;
import com.ccadllc.firebird.dss.server.configuration.blockset.domain.BlockSetRepository;
import com.ccadllc.firebird.dss.server.configuration.stream.domain.PeriodicDataUtility;
import com.ccadllc.firebird.dss.server.realtime.snapshot.manager.RealTimeSnapshotManager;
import com.ccadllc.firebird.dss.server.realtime.stream.manager.StreamManager;
import com.ccadllc.firebird.dss.server.realtime.timer.manager.TimerManager.BlockSetFutureComposite;

import org.easymock.EasyMock;
import org.easymock.IAnswer;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.google.common.collect.Sets;

/** Test for <code>TimerManager</code>'s internal executor. */
@Test
public class PeriodicBlockInserterTest
{
    private static final Long BLOCK_SET_HANDLE = 33L;

    private static final byte[][] PERIODIC_DATA_BLOCKS = new byte[][] {{(byte)0xff }, {(byte)0xfe }, {(byte)0xfd } };

    private static final int DATA_BLOCK_COUNT = PERIODIC_DATA_BLOCKS.length;
    private final MeteringType meteringType = MeteringType.EVENLY_SPACED;

    private StreamManager streamManager;
    private BlockSetRepository blockSetRepository;
    private TestExecutor testExecutor;
    private TimerManager timerManager;
    private RealTimeSnapshotManager mockRealtimeSnapshotManager;
    private final Map<String, String> streamProperties = MapUtility.toMap("stream1.key", "stream1.value");
    private final Map<String, String> properties = MapUtility.toMap("periodic1.key", "periodic1.value");

    @BeforeMethod
    public void setUp()
    {
        streamManager = EasyMock.createMock(StreamManager.class);
        blockSetRepository = EasyMock.createMock(BlockSetRepository.class);
        mockRealtimeSnapshotManager = EasyMock.createMock(RealTimeSnapshotManager.class);
        EasyMock.makeThreadSafe(streamManager, true);
        EasyMock.makeThreadSafe(blockSetRepository, true);
        EasyMock.makeThreadSafe(mockRealtimeSnapshotManager, true);
        testExecutor = new TestExecutor();

        timerManager = new TimerManager(testExecutor.getExecutor());
        timerManager.setRealtimeSnapshotManager(mockRealtimeSnapshotManager);
        timerManager.setBlockSetRepository(blockSetRepository);
        timerManager.setStreamManager(streamManager);
    }

    @AfterMethod
    public void tearDown()
    {
        testExecutor.getExecutor().shutdownNow();
        streamManager = null;
        blockSetRepository = null;
        testExecutor = null;
        timerManager = null;
    }

    @SuppressWarnings("unchecked")
    public void testPeriodicExecutorTaskForStreamManagerInsertionAndNonFiringAfterStopTime() throws Exception
    {
        final PeriodicSnapshot periodic = getPeriodicSnapshot();
        final Field cacheMap = timerManager.getClass().getDeclaredField("periodicCache");
        cacheMap.setAccessible(true);
        final Map<Long, TimerManager.PeriodicInfo> periodicCache = (Map<Long, TimerManager.PeriodicInfo>)cacheMap.get(timerManager);
        final TimerManager.PeriodicInfo perodicInfo = timerManager.new PeriodicInfo(periodic, PeriodicState.INACTIVE);
        periodicCache.put(periodic.getId(), perodicInfo);

        final Semaphore semaphore = new Semaphore(0);
        streamManager.insert((byte[])EasyMock.anyObject(), EasyMock.anyLong(), (TransmissionType)EasyMock.anyObject());
        EasyMock.expectLastCall().andAnswer(new IAnswer<Object>()
        {
            public Object answer()
            {
                //force the periodic in the manager's cache to have a past stop time so that at the
                //next periodic firing time, it woudn't do an insert, rather cancels it from the schedule.
                PeriodicSnapshot periodic = null;
                try
                {
                    periodic = getPeriodicSnapshotFromPastTime();
                }
                catch (final UnknownHostException uhe)
                {
                    // Nothing to do here
                }
                periodicCache.put(periodic.getId(), timerManager.new PeriodicInfo(periodic, PeriodicState.INACTIVE));
                semaphore.release();
                return null;
            }
        });
        EasyMock.replay(streamManager, mockRealtimeSnapshotManager);

        final Method schedulePeriodics = timerManager.getClass().getDeclaredMethod("schedulePeriodics", (Class<?>[])null);
        schedulePeriodics.setAccessible(true);
        schedulePeriodics.invoke(timerManager, (Object[]) null);

        semaphore.tryAcquire(5, TimeUnit.SECONDS);

        final Field futureMap = timerManager.getClass().getDeclaredField("scheduledFutureCache");
        futureMap.setAccessible(true);
        final Map<Long, BlockSetFutureComposite> futureCache = (Map<Long, BlockSetFutureComposite>)futureMap.get(timerManager);
        final BlockSetFutureComposite scheduledFuture = futureCache.get(periodic.getId());
        final Field futureField = scheduledFuture.getClass().getDeclaredField("future");
        futureField.setAccessible(true);
        final ScheduledFuture<?> future = (ScheduledFuture<?>)futureField.get(scheduledFuture);

        assertThat(futureCache.size(), is(1));
        assertThat(future.isCancelled(), is(false));

        //sleep for 1.5 second.
        Thread.sleep(1500);

        EasyMock.verify(streamManager);
        //Make sure that the non-firing code was hit through the run method.
        assertThat(futureCache.size(), is(0));
        assertThat(future.isCancelled(), is(true));
    }

    public void testPeriodicExecutorTaskForStreamManagerInsertionWithFunctionData() throws Exception
    {
        final PeriodicSnapshot periodic = getFunctionPeriodicSnapshot();
        periodicExecutorTaskForStreamManagerInsertion(periodic);
    }

    public void testPeriodicExecutorTaskForStreamManagerInsertionWithStreamedBlockSets() throws Exception
    {
        final PeriodicSnapshot periodic = getStreamedPeriodicSnapshot();

        final BlockSet blockSet = EasyMock.createMock(BlockSet.class);
        EasyMock.makeThreadSafe(blockSet, true);
        EasyMock.expect(blockSetRepository.getBlockSet(BLOCK_SET_HANDLE)).andReturn(blockSet);
        EasyMock.expect(blockSet.getNextBlock()).andReturn(PERIODIC_DATA_BLOCKS[0]);
        EasyMock.expect(blockSet.getNextBlock()).andReturn(PERIODIC_DATA_BLOCKS[1]);
        EasyMock.expect(blockSet.getNextBlock()).andReturn(PERIODIC_DATA_BLOCKS[2]);
        EasyMock.replay(blockSetRepository, blockSet, mockRealtimeSnapshotManager);

        periodicExecutorTaskForStreamManagerInsertion(periodic);

        EasyMock.verify(blockSetRepository, blockSet);
    }

    public void testPeriodicExecutorTaskForStreamManagerInsertionWithDataBlocks() throws Exception
    {
        final PeriodicSnapshot periodic = getDataBlockPeriodicSnapshot();
        periodicExecutorTaskForStreamManagerInsertion(periodic);
    }

    public void testPeriodicExecutorTaskForStreamManagerInsertionWithDataBlockStrings() throws Exception
    {
        final PeriodicSnapshot periodic = getDataBlockStringsPeriodicSnapshot();
        periodicExecutorTaskForStreamManagerInsertion(periodic);
    }

    @SuppressWarnings("unchecked")
    private void periodicExecutorTaskForStreamManagerInsertion(final PeriodicSnapshot periodic) throws Exception
    {
        final Field cacheMap = timerManager.getClass().getDeclaredField("periodicCache");
        cacheMap.setAccessible(true);
        final Map<Long, TimerManager.PeriodicInfo> periodicCache = (Map<Long, TimerManager.PeriodicInfo>)cacheMap.get(timerManager);
        periodicCache.put(periodic.getId(), timerManager.new PeriodicInfo(periodic, PeriodicState.INACTIVE));

        final Field isBlockSetRepositoryBind = timerManager.getClass().getDeclaredField("isBlockSetRepositoryActive");
        isBlockSetRepositoryBind.setAccessible(true);
        isBlockSetRepositoryBind.setBoolean(timerManager, true);

        streamManager.insert((byte[])EasyMock.anyObject(), EasyMock.anyLong(), (TransmissionType)EasyMock.anyObject());
        EasyMock.expectLastCall().times(1, DATA_BLOCK_COUNT);
        EasyMock.replay(streamManager);

        final Method schedulePeriodics = timerManager.getClass().getDeclaredMethod("schedulePeriodics", (Class<?>[])null);
        schedulePeriodics.setAccessible(true);
        schedulePeriodics.invoke(timerManager, (Object[])null);

        Thread.sleep(6000);

        // Verify that insert was called
        EasyMock.verify(streamManager);
    }

    private PeriodicSnapshot getPeriodicSnapshot() throws UnknownHostException
    {
        final byte[][] blocks = new byte[][] {{(byte)0xff } };
        final String rubyScript = JRubyBlockGenerator.generateRubyMethodForBlocks(blocks);
        final Date date1 = new Date();
        final Date date2 = new Date(date1.getTime() + 2000);
        final PeriodicSnapshot periodic = SnapshotUtility.createPeriodicSnapshot(2L, getStreamSnapshot(), PeriodicDataType.FUNCTION,
            new FunctionPeriodicData(rubyScript), date1, date2, 1, blocks.length, meteringType, properties);
        return periodic;
    }

    private PeriodicSnapshot getPeriodicSnapshotFromPastTime() throws UnknownHostException
    {
        final Date date = new Date();
        final Date date1 = new Date(date.getTime() - 30000);
        final Date date2 = new Date(date1.getTime() - 20000);
        final byte[][] blocks = new byte[][] {{(byte)0xff } };
        final String rubyScript = JRubyBlockGenerator.generateRubyMethodForBlocks(blocks);
        final PeriodicSnapshot periodic = SnapshotUtility.createPeriodicSnapshot(2L, getStreamSnapshot(), PeriodicDataType.FUNCTION,
            new FunctionPeriodicData(rubyScript), date1, date2, 1, blocks.length, meteringType, properties);
        return periodic;
    }


    private PeriodicSnapshot getFunctionPeriodicSnapshot() throws UnknownHostException
    {
        final Date date1 = new Date();
        final Date date2 = new Date(date1.getTime() + 1000);
        final byte[][] blocks = PERIODIC_DATA_BLOCKS;
        final String rubyScript = JRubyBlockGenerator.generateRubyMethodForBlocks(blocks);
        final PeriodicSnapshot periodic = SnapshotUtility.createPeriodicSnapshot(2L, getStreamSnapshot(), PeriodicDataType.FUNCTION,
            new FunctionPeriodicData(rubyScript), date1, date2, 1, blocks.length, meteringType, properties);
        return periodic;
    }
    private PeriodicSnapshot getStreamedPeriodicSnapshot() throws UnknownHostException
    {
        final Date date1 = new Date();
        final Date date2 = new Date(date1.getTime() + 1000);
        final Long handle = BLOCK_SET_HANDLE;

        final PeriodicSnapshot periodic = SnapshotUtility.createPeriodicSnapshot(2L, getStreamSnapshot(), PeriodicDataType.STREAMED_BLOCK_SET,
            new StreamedPeriodicData(handle), date1, date2, 1, PERIODIC_DATA_BLOCKS.length, meteringType, properties);
        return periodic;
    }

    private PeriodicSnapshot getDataBlockPeriodicSnapshot() throws UnknownHostException
    {
        final Date date1 = new Date();
        final Date date2 = new Date(date1.getTime() + 1000);
        final byte[][] blocks = PERIODIC_DATA_BLOCKS;
        final PeriodicSnapshot periodic = SnapshotUtility.createPeriodicSnapshot(2L, getStreamSnapshot(), PeriodicDataType.DATA_BLOCKS,
            new DataBlockPeriodicData(blocks), date1, date2, 1, blocks.length, meteringType, properties);
        return periodic;
    }

    private PeriodicSnapshot getDataBlockStringsPeriodicSnapshot() throws UnknownHostException
    {
        final Date date1 = new Date();
        final Date date2 = new Date(date1.getTime() + 1000);
        final byte[][] blocks = PERIODIC_DATA_BLOCKS;
        final String[] blocksAsStrings = new String[blocks.length];
        for (int i = 0; i < blocks.length; ++i)
        {
            blocksAsStrings[i] = PeriodicDataUtility.toHexStringWithoutPrefix(blocks[i]);
        }
        final PeriodicSnapshot periodic = SnapshotUtility.createPeriodicSnapshot(2L, getStreamSnapshot(), PeriodicDataType.DATA_BLOCK_STRINGS,
            new DataBlockStringsPeriodicData(blocksAsStrings), date1, date2, 1, blocks.length, meteringType, properties);
        return periodic;
    }

    private StreamSnapshot getStreamSnapshot() throws UnknownHostException
    {
        final Set<InetSocketAddress> destinations = Sets.newHashSet();
        destinations.add(new InetSocketAddress(InetAddress.getByName("127.0.0.1"), 5000));
        final StreamSnapshot stream = SnapshotUtility.createStreamSnapshot(2L, 1000, destinations, TransmissionType.MPEG2, StreamType.STANDALONE, 2, 3, 4, streamProperties);
        return stream;
    }

    private class TestExecutor
    {
        private static final int CORE_POOL_SIZE = 5;
        private CallbackSupportingScheduledExecutorService executor;

        public CallbackSupportingScheduledExecutorService getExecutor()
        {
            if (executor == null)
            {
                final ThreadNamingStrategy threadNamingStrategy = new BaseNameWithCountThreadNamingStrategy(getClass()
                    .getSimpleName());
                final ThreadFactory threadFactory = SimpleThreadFactory.create(threadNamingStrategy);
                final ScheduledExecutorService coreExecutor = new LoggingScheduledThreadPoolExecutor(CORE_POOL_SIZE, threadFactory);
                executor = new DelegatingCallbackSupportingScheduledExecutorService(Executors
                    .unconfigurableScheduledExecutorService(coreExecutor));
            }
            return executor;
        }
    }
}
