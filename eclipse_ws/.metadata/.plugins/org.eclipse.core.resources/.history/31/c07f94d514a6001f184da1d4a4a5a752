/* Copyright 2009 Combined Conditional Access Development, LLC. */
package com.ccadllc.firebird.vms.topology.stream.changeset.impl;

import static com.ccadllc.firebird.vms.topology.stream.TestData.SHAPING_PROFILE;
import static org.easymock.EasyMock.expect;
import static org.easymock.EasyMock.replay;
import static org.easymock.EasyMock.reset;
import static org.easymock.EasyMock.verify;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.collection.IsMapContaining.hasEntry;

import java.util.Map;
import com.ccadllc.commons.util.IntegerRange;
import com.ccadllc.commons.util.MapUtility;
import com.ccadllc.commons.util.Option;
import com.ccadllc.firebird.vms.topology.core.Element;
import com.ccadllc.firebird.vms.topology.core.ServingLocationQName;
import com.ccadllc.firebird.vms.topology.core.TransportStream;
import com.ccadllc.firebird.vms.topology.core.change.ChangeStatus;
import com.ccadllc.firebird.vms.topology.core.mutable.MutableTopologyModel;
import com.ccadllc.firebird.vms.topology.core.mutable.MutableTransportStream;
import com.ccadllc.firebird.vms.topology.stream.TransportStreamEntity;
import com.ccadllc.firebird.vms.topology.stream.changeset.ModifyTransportStreamChangeAgent;

import org.easymock.EasyMock;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.google.common.collect.Sets;

/**
 * Tests <code>ModifyStreamChangeAgent</code>.
 */
@Test
public class ModifyTransportStreamChangeAgentTest
{
    private final MutableTopologyModel model = EasyMock.createMock(MutableTopologyModel.class);

    private ModifyTransportStreamChangeAgent agent;

    private MutableTransportStream stream;

    @BeforeMethod
    public void beforeMethod()
    {
        reset(model);
        agent = new ModifyTransportStreamChangeAgent();
        stream = new TransportStreamEntity("stream1", null, SHAPING_PROFILE, ServingLocationQName
            .of(":pa:east"), MapUtility.<String, String> toMap("key1", "value1", "key2", "value2", "key3", "value3"), 8188, Sets.<IntegerRange>newTreeSet(), Sets.<IntegerRange>newTreeSet());
    }

    public void testExecuteWithNameChanged()
    {
        final Map<String, String> modify = MapUtility.toMap("id", stream.getId().toString(), "name", "stream2");

        expectQueryForStream();
        final MutableTransportStream mutableStream = expectCheckoutOccurs(stream);

        replay(model);

        agent.execute(model, modify, false);

        verify(model);

        assertThat(mutableStream.getName(), is("stream2"));
    }

    private MutableTransportStream expectCheckoutOccurs(final TransportStream stream)
    {
        final MutableTransportStream mutable = (MutableTransportStream)stream.thawedCopy();
        expect(model.checkout(stream)).andStubReturn(mutable);
        return mutable;
    }

    public void testExecuteWithRequiredAndAdditionalPropertiesResultsInAdditionalPropertiesAddedToStreamPropertiesMap()
    {
        expectQueryForStream();
        final MutableTransportStream mutableStream = expectCheckoutOccurs(stream);
        replay(model);

        final int oldNumProperties = stream.getProperties().size();

        final Map<String, String> modify = MapUtility.<String, String> toMap("id", stream.getId().toString(), "key4", "value4",
            "key5", "value5");
        agent.execute(model, modify, false);

        verify(model);

        assertThat(mutableStream.getProperties().size(), is(oldNumProperties + 2));
        assertThat(mutableStream.getProperties(), hasEntry("key4", "value4"));
        assertThat(mutableStream.getProperties(), hasEntry("key5", "value5"));
    }

    public void testExecuteWithChangedLocation()
    {
        expectQueryForStream();
        final MutableTransportStream mutableStream = expectCheckoutOccurs(stream);

        replay(model);

        final Map<String, String> modify = MapUtility.toMap("id", stream.getId().toString(), "servingLocation", ":md");
        agent.execute(model, modify, false);

        verify(model);

        assertThat(mutableStream.getLocation(), is(ServingLocationQName.of(":md")));
    }

    public void testExecuteWithNoLocation()
    {
        expectQueryForStream();
        final MutableTransportStream mutableStream = expectCheckoutOccurs(stream);

        replay(model);

        final Map<String, String> modify = MapUtility.toMap("id", stream.getId().toString(), "servingLocation", "");
        agent.execute(model, modify, false);

        verify(model);

        assertThat(mutableStream.getLocation(), is(ServingLocationQName.ORPHANED));
    }

    public void testExecuteWithStreamThatNoLongerExists()
    {
        expect(model.getElementById(stream.getId())).andReturn(Option.<Element>none());

        replay(model);

        final Map<String, String> modify = MapUtility.toMap("id", stream.getId().toString());
        final ChangeStatus status = agent.execute(model, modify, false);

        verify(model);

        assertThat(status.isValid(), is(false));
    }

    private void expectQueryForStream()
    {
        expect(model.getElementById(stream.getId())).andReturn(Option.<Element>some(stream));
    }
}
