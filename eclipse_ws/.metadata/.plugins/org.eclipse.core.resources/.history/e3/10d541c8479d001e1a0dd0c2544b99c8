/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.ccadllc.firebird.vms.dssrm.core;

import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import net.jcip.annotations.Immutable;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

import com.google.common.base.Preconditions;
import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;

/**
 *
 *
 */
@Immutable
public class BlockSetDescription {
    private final UUID id;
    private final List<BlockDescriptor> blockDescriptors;
    private final ImmutableMap<String, String> properties;

    private BlockSetDescription(final Builder builder)
    {
//        Preconditions.checkNotNull(builder.streamId, "streamId");
        if (builder.id == null)
        {
            id = UUID.randomUUID();
        }
        else
        {
            id = builder.id;
        }

        Preconditions.checkNotNull(builder.blockDescriptors, "blockDescriptors");
        blockDescriptors = builder.blockDescriptors;
        properties = ImmutableMap.copyOf(builder.properties);
    }


    public UUID getId()
    {
        return id;
    }

    public List<BlockDescriptor> getBlockDescriptors()
    {
        return  Collections.unmodifiableList(blockDescriptors);
    }

    public ImmutableMap<String, String> getProperties()
    {
        return properties;
    }

    @Override
    public int hashCode()
    {
        return HashCodeBuilder.reflectionHashCode(this);
    }

    @Override
    public boolean equals(final Object obj)
    {
        return EqualsBuilder.reflectionEquals(this, obj);
    }

    @Override
    public String toString()
    {
        return ToStringBuilder.reflectionToString(this);
    }

    public Builder toBuilder()
    {
        return new Builder()
            .id(id)
            .blockDescriptors(blockDescriptors)
            .properties(Maps.newHashMap(properties));
    }

    public static class Builder
    {
        private UUID id;
        private List<BlockDescriptor> blockDescriptors = Lists.newArrayList();
        private Map<String, String> properties = Maps.newHashMap();

        public Builder id(final UUID id)
        {
            this.id = id;
            return this;
        }

        public Builder blockDescriptors(final List<BlockDescriptor> blockDescriptors)
        {
            this.blockDescriptors = blockDescriptors;
            return this;
        }

        public Builder addBlockDescriptor(final int numberOfBlocks, final int blockByteSize)
        {
            blockDescriptors.add(new BlockDescriptor(numberOfBlocks, blockByteSize));
            return this;
        }

        public Builder addBlockDescriptors(final List<BlockDescriptor> descriptors)
        {
            if (descriptors != null)
            {
                blockDescriptors.addAll(descriptors);
            }

            return this;
        }

        public Builder addProperty(final String key, final String value)
        {
            properties.put(key, value);
            return this;
        }

        public Builder addProperties(final Map<String, String> properties)
        {
            if (properties != null)
            {
                this.properties.putAll(properties);
            }

            return this;
        }

        public Builder properties(final Map<String, String> properties)
        {
            this.properties = properties;
            return this;
        }

        public BlockSetDescription build()
        {
            return new BlockSetDescription(this);
        }
    }
}
