/*
 * Copyright 2008 Combined Conditional Access Development, LLC.
 */
package com.ccadllc.firebird.dss.it;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.greaterThan;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.Matchers.notNullValue;

import java.io.DataOutputStream;
import java.io.IOException;
import java.io.StringWriter;
import java.net.ConnectException;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import javax.jms.TextMessage;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

import com.ccadllc.firebird.dss.common.remote.messages.AbstractRouteData;
import com.ccadllc.firebird.dss.common.remote.messages.BlockRouteData;
import com.ccadllc.firebird.dss.common.remote.messages.EstablishTcpRouteRequest;
import com.ccadllc.firebird.dss.common.remote.messages.MpegPacketRouteData;
import com.ccadllc.firebird.dss.common.remote.messages.PeriodicInfo;
import com.ccadllc.firebird.dss.common.remote.messages.PidMapping;
import com.ccadllc.firebird.dss.common.remote.messages.StreamType;

import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

/**
 * The routing mechanism in the DSS for routes that are using TCP and accepting data in the form of blocks.
 */
public class EstablishTcpRouteIntegrationTest extends AbstractDssOsgiIntegrationTest
{
    // Setting length to 1048577
    private static final byte[] HUGE_TEST_BLOCK = new byte[1024 * 1024 + 1];

    static
    {
        Arrays.fill(HUGE_TEST_BLOCK, 0, HUGE_TEST_BLOCK.length, TEST_BLOCK_DATA_VALUE);
    }

    private Socket clientSocket;
    private DatagramSocket datagramSocketAtDest1;
    private DatagramSocket datagramSocketAtDest2;

    /**
     * The local server socket is closed on an existing connection if stream is deleted.
     */
    public void testTcpConnectionIsClosed_IfStreamIsDeletedFor_ExistingConnection() throws Exception
    {
        final long streamId = createStream(streamProperties, getNextUniqueStreamPid(), StreamType.MPEG2, MAX_AVERAGE, MAX_BURST, MAX_LATENCY, DESTINATION1);
        final int port = establishTcpRouteWithBlockData(streamId);
        assertThat(port, notNullValue());
        try
        {
            clientSocket = new Socket(InetAddress.getByName(IP_STRING), port);
            deleteStream(streamId);
            for (int i = 0; i <= 5000; i++)
            {
                clientSocket.getOutputStream().write(TEST_BLOCK_DATA_VALUE);
            }
            fail("Exception should have been thrown by now");
        }
        // CHECKSTYLE:OFF
        catch (final SocketException se)
        {
        }
        // CHECKSTYLE:ON
    }

    /**
     * The socket on the server is closed and that no connections can ever be made after deletion.
     */
    public void testTcpConnectionIsClosed_IfStreamIsDeletedFor_NewConnection() throws Exception
    {
        final long streamId = createStream(streamProperties, getNextUniqueStreamPid(), StreamType.MPEG2, MAX_AVERAGE, MAX_BURST, MAX_LATENCY, DESTINATION1);
        final int port = establishTcpRouteWithBlockData(streamId);
        deleteStream(streamId);
        try
        {
            new Socket(InetAddress.getByName(IP_STRING), port);
            fail("Exception should have been thrown by now");
        }
        //CHECKSTYLE:OFF
        catch (final ConnectException ce)
        {
        //CHECKSTYLE:ON
        }
    }

    /**
     * Maximum block size is one megabyte. Anything larger than that will close the connection on the server.
     */
    public void testTcpConnectionIsClosed_IfBlockSizeExceedsMaximum() throws Exception
    {
        final long streamId = createStream(streamProperties, getNextUniqueStreamPid(), StreamType.MPEG2, MAX_AVERAGE, MAX_BURST, MAX_LATENCY, DESTINATION1);
        final int port = establishTcpRouteWithBlockData(streamId);
        clientSocket = new Socket(InetAddress.getByName(IP_STRING), port);

        try
        {
            final DataOutputStream outputStream = new DataOutputStream(clientSocket.getOutputStream());

            // Write a block length of 1 megabyte + 1 byte
            outputStream.write(payloadDataWithTcpLengthHeader(HUGE_TEST_BLOCK));

            // Continue to try and write bytes to the connection, should result in Broken pipe error.
            for (int i = 0; i < 20000; i++)
            {
                outputStream.write(0);
            }
            fail("Expected exception was not thrown.");
        }
        catch (final IOException e)
        {
            // Expected Exception
        }
    }

    public void testServerShouldShutdownOriginatingPortAfterFirstConnection() throws Exception
    {
        final long streamId = createStream(streamProperties, getNextUniqueStreamPid(), StreamType.MPEG2, MAX_AVERAGE, MAX_BURST, MAX_LATENCY, DESTINATION1);
        final int port = establishTcpRouteWithBlockData(streamId);

        clientSocket = new Socket(InetAddress.getByName(IP_STRING), port);
        Exception exceptionThrown = null;
        try
        {
            //Must give server some time to close ServerSocket connection
            Thread.sleep(5000);
            new Socket(InetAddress.getByName(IP_STRING), port);
        }
        catch (final SocketException se)
        {
            exceptionThrown = se;
        }
        assertThat(exceptionThrown, is(notNullValue()));
    }

    /**
     * Simplest happy path.
     */
    public void testEstablishTcpRouteAndSendBlockData() throws Exception
    {
        final Long streamId = createAMpegStream(PID_OUT1, IP_STRING, PORT1);
        final int port = establishTcpRouteWithBlockData(streamId);

        final MappingVerifier verifier = new MappingVerifier(getDummyBlockData(),
            new MappingVerifierComposite(IP_STRING, PORT1, true));

        assertDataReceivedForTcpSource(port, verifier);

    }

    public void testTwoOrMoreRequestsForTheSameStreamAreGivenSeparateTcpPorts() throws Exception
    {
        final long streamId = createStream(streamProperties, getNextUniqueStreamPid(), StreamType.MPEG2, MAX_AVERAGE, MAX_BURST, MAX_LATENCY, DESTINATION1);
        final int firstPort = establishTcpRouteWithBlockData(streamId);
        final int secondPort = establishTcpRouteWithBlockData(streamId);
        assertThat(firstPort, not(secondPort));
    }

    public void XtestDeletingOneStreamDoesNotAffectOtherStreams() throws Exception
    {
        final long streamIdForDest1 = createStream(streamProperties, PID_OUT1, StreamType.MPEG2, MAX_AVERAGE, MAX_BURST, MAX_LATENCY, DESTINATION1);
        final long streamIdForDest2 = createStream(streamProperties, PID_OUT2, StreamType.MPEG2, MAX_AVERAGE, MAX_BURST, MAX_LATENCY, DESTINATION2);
        final int portForDest1 = establishTcpRouteWithBlockData(streamIdForDest1);
        final int portForDest2 = establishTcpRouteWithBlockData(streamIdForDest2);

        assertDataReceivedForTcpSource(portForDest1, new MappingVerifier(getDummyBlockData(),
            new MappingVerifierComposite(IP_STRING, PORT1, true)));
        assertDataReceivedForTcpSource(portForDest2, new MappingVerifier(getDummyBlockData(),
            new MappingVerifierComposite(IP_STRING, PORT2, true)));

        deleteStream(streamIdForDest1);

        assertDataReceivedForTcpSource(portForDest1, new MappingVerifier(getDummyBlockData(),
            new MappingVerifierComposite(IP_STRING, PORT1, false)));
        assertDataReceivedForTcpSource(portForDest2, new MappingVerifier(getDummyBlockData(),
            new MappingVerifierComposite(IP_STRING, PORT2, true)));
    }

    public void testIfStreamGetsUpdatedBeforeEstablishingAConnectionDataShouldBeSentToNewDestination() throws Exception
    {
        final long streamId = createStream(streamProperties, getNextUniqueStreamPid(), StreamType.MPEG2, MAX_AVERAGE, MAX_BURST, MAX_LATENCY, DESTINATION1);

        // Wait for add event to process
        final int port = establishTcpRouteWithBlockData(streamId);

        updateStreamAndVerifyStreamAndDestinationExists(streamId, DESTINATION2);

        assertDataReceivedForTcpSource(port, new MappingVerifier(getDummyBlockData(),
            new MappingVerifierComposite(IP_STRING, PORT2, true)));
    }

    public void testMpegPacketsWithPidNotInMappingAreRejected() throws Exception
    {
        final Long streamId = createAMpegStream(PID_OUT1, IP_STRING, PORT1);
        createAMpegStream(PID_OUT2, IP_STRING, PORT2);

        final int port = establishATcpRouteWithMpegData(Lists.newArrayList(new PidMapping(VALID_PID, Lists.newArrayList(streamId))));

        final MappingVerifier verifier = new MappingVerifier(getDummyMpegPacket(VALID_PID),
            new MappingVerifierComposite(PID_OUT1, IP_STRING, PORT1, true), new MappingVerifierComposite(PID_OUT2, IP_STRING, PORT2, false));
        assertDataReceivedForTcpSource(port, verifier);
    }

    /**
     * Maximum value is 9223372036854775807.
     */
    // CHECKSTYLE:OFF
    public void testShouldSendErrorWhen_StreamIdAboveMaxRange() throws Exception
    // CHECKSTYLE:ON
    {
        final String invalidRequest = aValidTcpRouteRequestWithBlockDataRequest().replaceAll("streamId=\"\\w*\"",
            String.format("streamId='%d'", PeriodicInfo.STREAM_ID_MAXIMUM + 1));
        verifyIsErrorResponse(sendAndWait(invalidRequest, EstablishTcpRouteRequest.class.getSimpleName()));
    }

    /**
     * Minimum stream id is 0.
     */
    // CHECKSTYLE:OFF
    public void testShouldSendErrorWhen_StreamIdBelowMinRange() throws Exception
    // CHECKSTYLE:ON
    {
        final String invalidRequest = aValidTcpRouteRequestWithBlockDataRequest().replaceAll("streamId=\"\\w*\"",
            String.format("streamId='%d'", PeriodicInfo.STREAM_ID_MINIMUM - 1));
        verifyIsErrorResponse(sendAndWait(invalidRequest, EstablishTcpRouteRequest.class.getSimpleName()));
    }

    public void testSuccessfullyEstablished_ForBlockData_WithMultipleStreams() throws Exception
    {
        final Long streamId = createAMpegStream(PID_OUT1, IP_STRING, PORT1);
        final Long streamId2 = createAMpegStream(PID_OUT2, IP_STRING, PORT2);

        final int port = establishATcpRouteWithBlockData(Sets.newHashSet(streamId, streamId2));

        final MappingVerifier verifier = new MappingVerifier(getDummyBlockData(),
            new MappingVerifierComposite(IP_STRING, PORT1, true),
            new MappingVerifierComposite(IP_STRING, PORT2, true));

        assertDataReceivedForTcpSource(port, verifier);
    }

    public void testSuccessfullyEstablished_ForBlockData_WhenStreamsListIsEmpty() throws Exception
    {
        assertThat(establishATcpRouteWithBlockData(Sets.<Long>newHashSet()), greaterThan(0));
    }

    public void testSuccessfullyEstablished_ForMpegPackets_WhenPidMappingStructureIsEmpty() throws Exception
    {
        assertThat(establishATcpRouteWithMpegData(Lists.<PidMapping>newArrayList()), greaterThan(0));
    }

    public void testErrorSentWhen_NoPidMappingOrStreamsListPresent() throws Exception
    {
        verifyIsErrorResponse(sendAndWait("<establishTcpRouteRequest></establishTcpRouteRequest>", EstablishTcpRouteRequest.class.getSimpleName()));
    }

    public void testErrorSentWhen_Establishing_BlockDataRoute_WithStreamId_Malformed() throws Exception
    {
        final Long streamId = createAMpegStream(PID_OUT1, IP_STRING, PORT1);
        final String xml = (asXml(new EstablishTcpRouteRequest(new BlockRouteData(Sets.<Long>newHashSet(streamId))))).replace("<streamId>", "<junk>");
        verifyIsErrorResponse(sendAndWait(xml, EstablishTcpRouteRequest.class.getSimpleName()));
    }

    public void testErrorSentWhen_Establishing_BlockDataRoute_WithStreamIdNonexistingInDss() throws Exception
    {
        final String xml = (asXml(new EstablishTcpRouteRequest(new BlockRouteData(Sets.<Long>newHashSet(Long.valueOf(1L))))));
        verifyIsErrorResponse(sendAndWait(xml, EstablishTcpRouteRequest.class.getSimpleName()));
    }

    public void testErrorSentWhen_MultipleStreamsInStreamsListAndOneStreamIdNonexistingInDss() throws Exception
    {
        final Long streamId = createAMpegStream(PID_OUT1, IP_STRING, PORT1);
        final String xml = (asXml(new EstablishTcpRouteRequest(new MpegPacketRouteData(Lists.newArrayList(new PidMapping(VALID_PID, Lists.newArrayList(streamId, 1L)))))));
        verifyIsErrorResponse(sendAndWait(xml, EstablishTcpRouteRequest.class.getSimpleName()));
    }

    public void testErrorSentWhen_PidNumber_Malformed() throws Exception
    {
        final String xmlMsg = aValidTcpRouteRequestWithMpegDataRequest().replaceAll("pid=\"" + VALID_PID + "\"", "pid=\"junk\"");
        final TextMessage message = sendAndWait(xmlMsg, EstablishTcpRouteRequest.class.getSimpleName());
        verifyIsErrorResponse(message);
    }

    public void testErrorSentWhen_PidNumber_Missing() throws Exception
    {
        final String xmlMsg = aValidTcpRouteRequestWithMpegDataRequest().replaceAll("pid=\"" + VALID_PID + "\"", "pid=\"\"");
        final TextMessage message = sendAndWait(xmlMsg, EstablishTcpRouteRequest.class.getSimpleName());
        verifyIsErrorResponse(message);
    }

    public void testErrorSentWhen_PidNumber_TooLarge() throws Exception
    {
        establishTcpRouteAndVerifyExceptionOccurs(anMpegPacketRouteData(PORT1, IP_STRING, MAX_PID + 1));
    }

    public void testErrorSentWhen_PidNumber_TooSmall() throws Exception
    {
        establishTcpRouteAndVerifyExceptionOccurs(anMpegPacketRouteData(PORT1, IP_STRING, MIN_PID - 1));
    }

    public void testErrorSentWhen_StreamId_Malformed_RouteWithBlockData() throws Exception
    {
        final String xmlMsg = aValidTcpRouteRequestWithBlockDataRequest().replace("<streamId>", "<junk>");
        final TextMessage message = sendAndWait(xmlMsg, EstablishTcpRouteRequest.class.getSimpleName());
        verifyIsErrorResponse(message);
    }

    public void testErrorSentWhen_StreamId_MalformedInPidMapping_RouteWithMpegData() throws Exception
    {
        final String xmlMsg = aValidTcpRouteRequestWithMpegDataRequest().replace("<streamId>", "<junk>");
        final TextMessage message = sendAndWait(xmlMsg, EstablishTcpRouteRequest.class.getSimpleName());
        verifyIsErrorResponse(message);
    }

    public void testErrorSentWhen_StreamId_Missing_RouteWithBlockData() throws Exception
    {
        final String xmlMsg = replaceDataInXmlElement(aValidTcpRouteRequestWithBlockDataRequest(), "streamId", "");
        final TextMessage message = sendAndWait(xmlMsg, EstablishTcpRouteRequest.class.getSimpleName());
        verifyIsErrorResponse(message);
    }

    public void testErrorSentWhen_StreamId_MissingInPidMapping_RouteWithMpegData() throws Exception
    {
        final String xmlMsg = replaceDataInXmlElement(aValidTcpRouteRequestWithMpegDataRequest(), "streamId", "");
        final TextMessage message = sendAndWait(xmlMsg, EstablishTcpRouteRequest.class.getSimpleName());
        verifyIsErrorResponse(message);
    }

    public void testSuccessfullyEstablished_ForMpegPackets_WithSinglePidMappedToMultipleStreams() throws Exception
    {
        final Long streamId = createAMpegStream(PID_OUT1, IP_STRING, PORT1);
        final Long streamId2 = createAMpegStream(PID_OUT2, IP_STRING, PORT2);
        final List<PidMapping> pidMappings = Lists.newArrayList(new PidMapping(VALID_PID, Lists.newArrayList(streamId, streamId2)));

        final int port = establishATcpRouteWithMpegData(pidMappings);

        final MappingVerifier verifier = new MappingVerifier(getDummyMpegPacket(VALID_PID),
            new MappingVerifierComposite(PID_OUT1, IP_STRING, PORT1, true),
            new MappingVerifierComposite(PID_OUT2, IP_STRING, PORT2, true));

        assertDataReceivedForTcpSource(port, verifier);
    }

    public void testSuccesfullyEstablishTcpRouteAndSendBlockData() throws Exception
    {
        final Long streamId = createAMpegStream(PID_OUT1, IP_STRING, PORT1);

        final int port = establishATcpRouteWithBlockData(Sets.newHashSet(streamId));

        final MappingVerifier verifier = new MappingVerifier(getDummyBlockData(),
            new MappingVerifierComposite(IP_STRING, PORT1, true));

        assertDataReceivedForTcpSource(port, verifier);
    }

    public void testRoute_SuccessfullyEstablishedWith_SinglePid_MappedToSingleStream() throws Exception
    {
        final Long streamId = createAMpegStream(PID_OUT1, IP_STRING, PORT1);

        final int port = establishATcpRouteWithMpegData(
            Collections.singletonList(new PidMapping(VALID_PID, Lists.newArrayList(streamId))));

        final MappingVerifier verifier = new MappingVerifier(getDummyMpegPacket(VALID_PID),
                    new MappingVerifierComposite(PID_OUT1, IP_STRING, PORT1, true));

        assertDataReceivedForTcpSource(port, verifier);
    }

    public void testSuccessfullyEstablished_ForMpegPackets_WithMultiplePidsMappedToSameStream() throws Exception
    {
        final Long streamId = createAMpegStream(PID_OUT1, IP_STRING, PORT1);
        final List<PidMapping> pidMappings = Lists.newArrayList(
            new PidMapping(VALID_PID, Lists.newArrayList(streamId)),
            new PidMapping(VALID_PID2, Lists.newArrayList(streamId))
        );

        final int port = establishATcpRouteWithMpegData(pidMappings);

        final MappingVerifier verifier = new MappingVerifier(payloadDataWithTcpLengthHeader(getDummyBlockData()),
            new MappingVerifierComposite(IP_STRING, PORT1, true),
            new MappingVerifierComposite(IP_STRING, PORT2, true));

        assertDataReceivedForTcpSource(port, verifier);
    }

    public void testErrorSentWhen_StreamIdInPidMappingNonexistingInDss() throws Exception
    {
        final String xmlMsg = aValidTcpRouteRequestWithMpegDataRequest();
        final TextMessage message = sendAndWait(xmlMsg, EstablishTcpRouteRequest.class.getSimpleName());
        verifyIsErrorResponse(message);
    }

    public void testDeletionOfAStreamInMpegDataRoute_ResultsInDeletionOfAllPidMappingsContainingDeletedStream() throws Exception
    {
        final Long streamId = createAMpegStream(PID_OUT1, IP_STRING, PORT1);
        final Long streamId2 = createAMpegStream(PID_OUT2, IP_STRING, PORT2);
        verifyNumberOfStreams(2);

        final int port = establishATcpRouteWithMpegData(Lists.newArrayList(new PidMapping(VALID_PID, Lists.newArrayList(streamId, streamId2))));

        final MappingVerifier verifier = new MappingVerifier(getDummyMpegPacket(VALID_PID),
            new MappingVerifierComposite(PID_OUT1, IP_STRING, PORT1, true),
            new MappingVerifierComposite(PID_OUT2, IP_STRING, PORT2, true));
        assertDataReceivedForUdpSource(port, verifier);

        deleteStream(streamId);
        verifyNumberOfStreams(1);
        verifier.getStreamDestinationMappingInfos().get(0).setMapped(false);
        assertDataReceivedForUdpSource(port, verifier);
    }

    public void XtestDeletionOfAStream_ResultsInDeletionOfAllPidMappingsContainingDeletedStream() throws Exception
    {
        final Long streamId = createAMpegStream(PID_OUT1, IP_STRING, PORT1);
        final Long streamId2 = createAMpegStream(PID_OUT2, IP_STRING, PORT2);
        final List<PidMapping> pidMappings = Lists.newArrayList(new PidMapping(VALID_PID, Lists.newArrayList(streamId, streamId2)));
        final int port = establishATcpRouteWithMpegData(pidMappings);

        assertDataReceivedForTcpSource(port, new MappingVerifier(getDummyMpegPacket(VALID_PID),
            new MappingVerifierComposite(PID_OUT1, IP_STRING, PORT1, true),
            new MappingVerifierComposite(PID_OUT2, IP_STRING, PORT2, true)));

        deleteStream(streamId);
        verifyNumberOfStreams(1);

        assertDataReceivedForTcpSource(port, new MappingVerifier(getDummyMpegPacket(VALID_PID),
            new MappingVerifierComposite(PID_OUT1, IP_STRING, PORT1, false),
            new MappingVerifierComposite(PID_OUT2, IP_STRING, PORT2, true)));
    }

    public void testDeletionOfAStream_ResultsInDeletionOfAllStreamsFromBlockRouteContainingDeletedStream() throws Exception
    {
        final Long streamId = createAMpegStream(PID_OUT1, IP_STRING, PORT1);
        final Long streamId2 = createAMpegStream(PID_OUT2, IP_STRING, PORT2);
        final int port = establishATcpRouteWithBlockData(Sets.newHashSet(streamId, streamId2));

        assertDataReceivedForTcpSource(port, new MappingVerifier(getDummyBlockData(),
            new MappingVerifierComposite(IP_STRING, PORT1, true),
            new MappingVerifierComposite(IP_STRING, PORT2, true)));

        deleteStream(streamId);
        verifyNumberOfStreams(1);

        assertDataReceivedForTcpSource(port, new MappingVerifier(getDummyBlockData(),
            new MappingVerifierComposite(IP_STRING, PORT1, false),
            new MappingVerifierComposite(IP_STRING, PORT2, true)));
    }

    @Override
    protected void onTearDown() throws Exception
    {
        super.onTearDown();

        if (clientSocket != null)
        {
            clientSocket.close();
        }

        if (datagramSocketAtDest1 != null)
        {
            datagramSocketAtDest1.close();
        }

        if (datagramSocketAtDest2 != null)
        {
            datagramSocketAtDest2.close();
        }
    }

    private String aValidTcpRouteRequestWithMpegDataRequest() throws JAXBException
    {
        return asXml(new EstablishTcpRouteRequest(new MpegPacketRouteData(Collections.singletonList(new PidMapping(VALID_PID, Lists.newArrayList(123L))))));
    }

    private String aValidTcpRouteRequestWithBlockDataRequest() throws JAXBException
    {
        return asXml(new EstablishTcpRouteRequest(new BlockRouteData(Sets.newHashSet(123L))));
    }

    private void establishTcpRouteAndVerifyExceptionOccurs(final AbstractRouteData routeData)
    {
        try
        {
            dssClient.establishTcpRoute(routeData);
            fail("Expected an exception");
        }
        // CHECKSTYLE:OFF
        catch (final Exception e)
        {
        }
        // CHECKSTYLE:ON
    }

    public static String asXml(final Object messageObject) throws JAXBException
    {
        final JAXBContext jc = JAXBContext.newInstance(messageObject.getClass());
        final Marshaller marshaller = jc.createMarshaller();
        final StringWriter stringWriter = new StringWriter();
        marshaller.marshal(messageObject, stringWriter);

        return stringWriter.toString();
    }

}
