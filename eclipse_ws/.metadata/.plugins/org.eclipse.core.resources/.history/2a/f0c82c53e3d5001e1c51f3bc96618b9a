/* Copyright 2008 Combined Conditional Access Development, LLC. */
package com.ccadllc.firebird.dss.server.realtime.stream.manager.impl;

import java.nio.ByteBuffer;
import java.util.Queue;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

import com.ccadllc.firebird.vms.common.packetfiltering.ForwardingPacketFilter;
import com.ccadllc.firebird.vms.common.packetfiltering.PacketFilter;

import net.jcip.annotations.ThreadSafe;

import com.google.common.collect.Lists;

/**
 * Implementation of the <code>ForwardingPacketFilter</code> for creating UDP datagrams of the mpeg packets.
 *
 */
@ThreadSafe
public class TransportPacker extends ForwardingPacketFilter
{
    private static final int MAX_QUEUED_PACKETS = 7;

    private final Object lock = new Object();
    private final Queue<byte[]> packetsReadyToBeSent = Lists.newLinkedList();
    private final ScheduledFuture<?> timer;

    public TransportPacker(final PacketFilter sink, final ScheduledExecutorService executor)
    {
        super(sink);

        timer = executor.scheduleWithFixedDelay(new Runnable() {
            @Override
            public void run()
            {
                synchronized (lock)
                {
                    sendPackets();
                }
            }
        }, 50, 50, TimeUnit.MILLISECONDS);
    }

    @Override
    public boolean insert(final byte[] packet)
    {
        synchronized (lock)
        {
            packetsReadyToBeSent.offer(packet);

            if (packetsReadyToBeSent.size() == MAX_QUEUED_PACKETS)
            {
                sendPackets();
            }

            return true;
        }
    }

    private void sendPackets()
    {
        // transportPacket = combine all packets into single byte[]
        if (!packetsReadyToBeSent.isEmpty())
        {
            int capacity = 0;
            for (final byte[] packet : packetsReadyToBeSent)
            {
                capacity += packet.length;
            }

            final ByteBuffer buffer = ByteBuffer.allocate(capacity);
            for (final byte[] packet : packetsReadyToBeSent)
            {
                buffer.put(packet);
            }

            buffer.flip();
            final byte[] transportPacket = new byte[capacity];
            buffer.get(transportPacket);

            final boolean inserted = sink().insert(transportPacket);
            if (inserted)
            {
                packetsReadyToBeSent.clear();
            }
        }
    }

    @Override
    public void dispose()
    {
        super.dispose();
        timer.cancel(true);
    }
}
