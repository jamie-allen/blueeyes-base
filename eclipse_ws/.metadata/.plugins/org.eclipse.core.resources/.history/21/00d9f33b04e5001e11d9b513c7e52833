/* Copyright 2009 Combined Conditional Access Development, LLC. */
package com.ccadllc.firebird.dss.server.common;

import java.net.InetSocketAddress;

import com.ccadllc.firebird.core.base.common.UnresolvedInetAddress;

import net.jcip.annotations.Immutable;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

import com.google.common.base.Preconditions;

/**
 * Snapshot of persisted DefaultStreamDestination.
 */
@Immutable
public final class DefaultStreamDestinationSnapshot implements StreamDestinationSnapshot
{
    private final String inetAddress;
    private final Integer port;

    public DefaultStreamDestinationSnapshot(final String inetAddress, final Integer port)
    {
        Preconditions.checkNotNull(inetAddress, "Hostname cannot be null");
        Preconditions.checkNotNull(port, "Port cannot be null");
        this.inetAddress = inetAddress;
        this.port = port;
    }

    public DefaultStreamDestinationSnapshot(final String inetAddress)
    {
        Preconditions.checkNotNull(inetAddress, "Hostname cannot be null");
        this.inetAddress = inetAddress;
        port = null;
    }

    public UnresolvedInetAddress getAsInetAddress()
    {
        return UnresolvedInetAddress.create(inetAddress);
    }

    public InetSocketAddress getAsInetSocketAddress()
    {
        Preconditions.checkNotNull(port, "Port cannot be null when retrieving a stream destination as an InetSocketAddress.");
        return InetSocketAddress.createUnresolved(inetAddress, port);
    }

    public String getInetAddress()
    {
        return inetAddress;
    }

    public Integer getPort()
    {
        return port;
    }

    @Override
    public int hashCode()
    {
        return HashCodeBuilder.reflectionHashCode(this);
    }

    @Override
    public boolean equals(final Object obj)
    {
        return EqualsBuilder.reflectionEquals(this, obj);
    }

    @Override
    public String toString()
    {
        return ToStringBuilder.reflectionToString(this);
    }
}
