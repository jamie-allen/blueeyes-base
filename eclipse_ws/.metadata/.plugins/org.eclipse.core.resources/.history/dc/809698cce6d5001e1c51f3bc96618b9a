/* Copyright 2009 Combined Conditional Access Development, LLC. */
package com.ccadllc.firebird.dss.server.realtime.external.route.manager.impl;

import static com.ccadllc.firebird.dss.server.realtime.snapshot.manager.RealTimeSnapshotManager.SNAPSHOT_MANAGER_REFRESH_EVENT;
import static com.ccadllc.firebird.dss.server.realtime.snapshot.manager.RealTimeSnapshotManager.UDP_ROUTE_SNAPSHOT_ESTABLISH_EVENT;
import static com.ccadllc.firebird.dss.server.realtime.snapshot.manager.RealTimeSnapshotManager.UDP_ROUTE_SNAPSHOT_REMOVE_EVENT;
import static com.ccadllc.firebird.dss.server.realtime.snapshot.manager.RealTimeSnapshotManager.UDP_ROUTE_SNAPSHOT_UPDATE_EVENT;

import java.io.IOException;
import java.util.List;
import java.util.concurrent.ConcurrentMap;

import javax.annotation.PreDestroy;

import com.ccadllc.commons.util.Pair;
import com.ccadllc.firebird.dss.common.datatypes.TransportProtocolType;
import com.ccadllc.firebird.dss.server.common.MBeanServerUtility;
import com.ccadllc.firebird.dss.server.common.OsgiEventPropertyKeys;
import com.ccadllc.firebird.dss.server.common.RouteJmxUtility;
import com.ccadllc.firebird.dss.server.common.RouteSnapshot;
import com.ccadllc.firebird.dss.server.realtime.external.route.manager.management.JmxRouteNotificationManager;
import com.ccadllc.firebird.dss.server.realtime.snapshot.manager.RealTimeSnapshotManager;
import com.ccadllc.firebird.dss.server.realtime.stream.manager.StreamManager;

import net.jcip.annotations.GuardedBy;
import net.jcip.annotations.ThreadSafe;

import org.osgi.service.event.Event;
import org.osgi.service.event.EventHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.google.common.base.Function;
import com.google.common.base.Preconditions;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.google.common.collect.MapMaker;

/**
 * Manages UDP routes for use within the realtime portion of DSS.
 *
 * <p>Maintains a cache of {@code RouteController}s for each UDP route within DSS.  Also, this class handles events
 * dispatched by the {@code com.ccadllc.firebird.dss.server.realtime.snapshot.manager} bundle to maintain
 * the current information relating to this cache of routes.</p>
 */
@ThreadSafe
public final class UdpRouteManager implements EventHandler
{
    public static final String[] EVENT_TOPICS = new String[] {SNAPSHOT_MANAGER_REFRESH_EVENT, UDP_ROUTE_SNAPSHOT_ESTABLISH_EVENT,
        UDP_ROUTE_SNAPSHOT_UPDATE_EVENT, UDP_ROUTE_SNAPSHOT_REMOVE_EVENT};

    private final Logger logger = LoggerFactory.getLogger(UdpRouteManager.class);
    private final RouteControllerFactory routeControllerFactory;
    private final RealTimeSnapshotManager realtimeSnapshotManager;
    private final StreamManager streamManager;
    private final JmxRouteNotificationManager jmxRouteNotificationManager;

    @GuardedBy("lock")
    private final ConcurrentMap<Integer, Pair<UdpRouteController, RouteSnapshot>> routeControllers = new MapMaker().makeMap();

    /** Lock used when manipulating any filter chain controller instances in the map. */
    private final Object lock = new Object();

    public UdpRouteManager(final RouteControllerFactory routeControllerFactory,
        final RealTimeSnapshotManager realtimeSnapshotManager, final StreamManager streamManager,
        final JmxRouteNotificationManager jmxRouteNotificationManager)
    {
        Preconditions.checkNotNull(routeControllerFactory);
        Preconditions.checkNotNull(realtimeSnapshotManager);
        Preconditions.checkNotNull(streamManager);
        Preconditions.checkNotNull(jmxRouteNotificationManager);

        this.routeControllerFactory = routeControllerFactory;
        this.realtimeSnapshotManager = realtimeSnapshotManager;
        this.streamManager = streamManager;
        this.jmxRouteNotificationManager = jmxRouteNotificationManager;
    }

    public void init()
    {
        logger.debug("Initializing ExternalRouteManager.");
        synchronized (lock)
        {
            for (final RouteSnapshot route : realtimeSnapshotManager.getRoutes().values())
            {
                try
                {
                    logger.debug("Creating initial UDP Route controller for route {}", route);
                    routeControllers.put(route.getPort(), new Pair<UdpRouteController, RouteSnapshot>(routeControllerFactory.createUdpRouteControllerAndExposeManagementInfo(route,
                        streamManager, jmxRouteNotificationManager), route));
                }
                catch (final IOException ioe)
                {
                    logger.warn("IOException on Initializing ExternalRouteManager.");
                }
            }
        }
    }

    /**
     * Handle OSGI events for which this class is registered.
     *
     * @param event OSGI event
     */
    public void handleEvent(final Event event)
    {
        final String topic = event.getTopic();
        logger.debug("Received event {}", topic);

        try
        {
            if (topic.equals(RealTimeSnapshotManager.UDP_ROUTE_SNAPSHOT_ESTABLISH_EVENT))
            {
                handleEstablishUdpRouteEvent((RouteSnapshot)event.getProperty(OsgiEventPropertyKeys.ROUTE_SNAPSHOT_KEY));
            }
            else if (topic.equals(RealTimeSnapshotManager.UDP_ROUTE_SNAPSHOT_UPDATE_EVENT))
            {
                handleUpdateUdpRouteEvent((RouteSnapshot)event.getProperty(OsgiEventPropertyKeys.ROUTE_SNAPSHOT_KEY));
            }
            else if (topic.equals(RealTimeSnapshotManager.UDP_ROUTE_SNAPSHOT_REMOVE_EVENT))
            {
                handleRemoveUdpRouteEvent((RouteSnapshot)event.getProperty(OsgiEventPropertyKeys.ROUTE_SNAPSHOT_KEY));
            }
            else if (topic.equals(RealTimeSnapshotManager.SNAPSHOT_MANAGER_REFRESH_EVENT))
            {
                handleSnapshotManagerRefreshEvent();
            }
            else
            {
                logger.warn("Can not handle this unknown event type: {} ", topic);
            }
        }
        catch (final IOException ioe)
        {
            logger.warn(String.format("Issue handling event type %s.", topic), ioe);
        }
        catch (final IllegalArgumentException iae)
        {
            logger.warn(String.format("Issue handling event %s.", event), iae);
        }
    }

    private void handleEstablishUdpRouteEvent(final RouteSnapshot route) throws IOException
    {
        logger.debug("Establish a UDP route controller for route {}", route);
        Preconditions.checkArgument(route.getTransportProtocolType() == TransportProtocolType.UDP, "Route snapshot with unsupported transport protocol received.");
        synchronized (lock)
        {
            final Pair<UdpRouteController, RouteSnapshot> pair = routeControllers.get(route.getPort());
            if (pair == null)
            {
                routeControllers.put(route.getPort(), new Pair<UdpRouteController, RouteSnapshot>(routeControllerFactory.createUdpRouteControllerAndExposeManagementInfo(route, streamManager, jmxRouteNotificationManager), route));
            }
            else
            {
                logger.warn("Can not add route for port {} as that port is already in use", route.getPort());
            }
        }
    }

    private void handleUpdateUdpRouteEvent(final RouteSnapshot route)
    {
        Preconditions.checkArgument(route.getTransportProtocolType() == TransportProtocolType.UDP, "Route snapshot with unsupported transport protocol received.");
        synchronized (lock)
        {
            final Pair<UdpRouteController, RouteSnapshot> pairToRemove = routeControllers.remove(route.getPort());
            if (pairToRemove != null)
            {
                final UdpRouteController routeController = pairToRemove.getFirst();
                if (routeController != null)
                {
                    routeController.update(route);
                    routeControllers.put(route.getPort(), new Pair<UdpRouteController, RouteSnapshot>(routeController, route));
                }
                else
                {
                    logger.warn("Did not find route controller for port {} on update event.", route.getPort());
                }
            }
        }
    }

    private void handleRemoveUdpRouteEvent(final RouteSnapshot route)
    {
        Preconditions.checkArgument(route.getTransportProtocolType() == TransportProtocolType.UDP, "Route snapshot with unsupported transport protocol received.");
        synchronized (lock)
        {
            final Pair<UdpRouteController, RouteSnapshot> pair = routeControllers.get(route.getPort());
            if (pair != null)
            {
                final UdpRouteController routeController = pair.getFirst();
                if (routeController != null)
                {
                    MBeanServerUtility.unregister(RouteJmxUtility.createRouteMxBeanName(route, RouteJmxUtility.ROUTE_INFORMATION_JMX_BEAN_TYPE));
                    routeController.shutdown();
                    routeControllers.remove(route.getPort());
                }
                else
                {
                    logger.warn("Did not find route controller for port {} on remove event.", route.getPort());
                }
            }
        }
    }

    private void handleSnapshotManagerRefreshEvent() throws IOException
    {
        shutdownAll();
        init();
    }

    /**
     * Performs all shutdown and clean up for the bundle.
     *
     * <p>Stops the executing thread and disposes of route controllers.</p>
     */
    @PreDestroy
    public void shutdownAll()
    {
        synchronized (lock)
        {
            for (final Integer port : routeControllers.keySet())
            {
                MBeanServerUtility.unregister(RouteJmxUtility.createRouteMxBeanName(routeControllers.get(port).getSecond(), RouteJmxUtility.ROUTE_INFORMATION_JMX_BEAN_TYPE));
                routeControllers.get(port).getFirst().shutdown();
            }
            routeControllers.clear();
        }
    }

    /**
     * @return route controllers (for testing purposes)
     */
    List<UdpRouteController> getRouteControllers()
    {
        synchronized (lock)
        {
            return Lists.newArrayList(Iterables.transform(routeControllers.values(),
                new Function<Pair<UdpRouteController, RouteSnapshot>, UdpRouteController>()
                {
                    public UdpRouteController apply(final Pair<UdpRouteController, RouteSnapshot> pair)
                    {
                        return pair.getFirst();
                    }
                }));
        }
    }
}
