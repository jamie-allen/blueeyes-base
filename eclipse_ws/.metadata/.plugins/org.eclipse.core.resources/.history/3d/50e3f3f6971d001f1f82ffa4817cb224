/* Copyright 2009 Combined Conditional Access Development, LLC. */
package com.ccadllc.commons.util;

import org.apache.commons.lang.builder.CompareToBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;

import com.google.common.base.Preconditions;

/** Represents an inclusive range of integers. */
public final class IntegerRange implements Comparable<IntegerRange>
{
    private final int start;
    private final int end;

    public IntegerRange(final int start, final int end)
    {
        Preconditions.checkArgument(start <= end, "start must be less than or equal to end");
        this.start = start;
        this.end = end;
    }

    @SuppressWarnings("unused")
    private IntegerRange()
    {
        start = 0;
        end = 0;
    }

    public int getStart()
    {
        return start;
    }

    public int getEnd()
    {
        return end;
    }

    public boolean inRange(final int test)
    {
        return test >= start && test <= end;
    }

    @Override
    public boolean equals(final Object obj)
    {
        return EqualsBuilder.reflectionEquals(this, obj);
    }

    @Override
    public int hashCode()
    {
        return HashCodeBuilder.reflectionHashCode(this);
    }

    @Override
    public String toString()
    {
        return String.format("[%d, %d]", start, end);
    }

    @Override
    public int compareTo(final IntegerRange other)
    {
        return new CompareToBuilder().append(start, other.start).append(end, other.end).toComparison();
    }

    public Boolean contains(final int value)
    {
        return value >= start && value <= end;
    }

    public boolean overlaps(final IntegerRange other)
    {
        Preconditions.checkNotNull(other, "other");
        return contains(other.start) || contains(other.end);
    }
}
