/* Copyright 2009 Combined Conditional Access Development, LLC. */
package com.ccadllc.firebird.vms.dssrm.provisioning;

import com.ccadllc.firebird.core.base.common.util.MorePreconditions;

import javax.persistence.Column;
import javax.persistence.Embeddable;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

/**
 * Describes one or more blocks in a BlockSet.
 *
 * @see BlockSetEntity
 */
@Embeddable
public class BlockDescriptor
{
    @Column(name="number_of_blocks")
    private final int numberOfBlocks;

    @Column(name="block_byte_size")
    private final int blockByteSize;

    @SuppressWarnings("unused")
    public BlockDescriptor()
    {
        numberOfBlocks = 0;
        blockByteSize = 0;
    }

    /**
     * Constructor.
     *
     * @param numberOfBlocks positive number of blocks to describe
     * @param blockByteSize positive size in bytes of the described number of blocks
     */
    public BlockDescriptor(final int numberOfBlocks, final int blockByteSize)
    {
        MorePreconditions.checkArgumentRange(numberOfBlocks, 0, Integer.MAX_VALUE, "number of blocks");
        MorePreconditions.checkArgumentRange(blockByteSize, 0, Integer.MAX_VALUE, "block size in bytes");

        this.numberOfBlocks = numberOfBlocks;
        this.blockByteSize = blockByteSize;
    }

    public int getNumberOfBlocks()
    {
        return numberOfBlocks;
    }

    public int getBlockByteSize()
    {
        return blockByteSize;
    }

    @Override
    public int hashCode()
    {
        return HashCodeBuilder.reflectionHashCode(this);
    }

    @Override
    public boolean equals(final Object obj)
    {
        return EqualsBuilder.reflectionEquals(this, obj);
    }

    @Override
    public String toString()
    {
        return ToStringBuilder.reflectionToString(this);
    }
}
